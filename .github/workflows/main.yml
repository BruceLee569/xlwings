name: Build Pipeline

on:
  # Run on all pushed commits, PRs and when a new release is created
  # Prevents duplicate pipeline runs as a release also pushes a tag
  pull_request:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  release:
    types:
      - created

jobs:
  lint:
    # Prevent duplicate runs for own PRs
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable
        with:
          options: "--check --diff --color"

  pre-build:
    # Prevent duplicate runs for own PRs
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: windows-2022
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        # pythonnet doesn't have wheels beyond 3.8
        python-version: '3.8'
        architecture: 'x64'
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Install Python dependencies
      run: |
        python -m pip install pythonnet wheel setuptools-rust cibuildwheel
    - name: Install Aspose
      shell: bash
      run: |
        mkdir ./aspose
        curl -L https://www.nuget.org/api/v2/package/Aspose.Cells/17.12.0 -o ./aspose/aspose.cells.nupkg
        unzip ./aspose/aspose.cells.nupkg -d ./aspose/
    - name: Caching dlls
      uses: actions/cache@v2
      id: cache
      with:
        path: |
          xlwings32.dll
          xlwings64.dll
        key: ${{ runner.os }}-${{ hashFiles('src/**') }}
    - name: Build dlls
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        msbuild $Env:GITHUB_WORKSPACE\src\xlwings.sln /p:Configuration=Release -maxcpucount
        msbuild $Env:GITHUB_WORKSPACE\src\xlwings.sln /p:Configuration=Release /p:Platform=x64 -maxcpucount
    - name: Get Certificate
      id: write_file
      uses: timheuer/base64-to-file@2d34558844bc851d6a653f79b3720f44dc6bff53
      with:
        fileName: 'cert.p12'
        encodedString: ${{ secrets.CODESIGN_CERTIFICATE }}
    - name: Set PATH for signtool
      shell: bash
      run: echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $GITHUB_PATH
    - name: Code Sign dlls
      run: |
        signtool sign /f ${{ steps.write_file.outputs.filePath }} /p ${{ secrets.CODESIGN_PASSWORD }} /tr http://timestamp.sectigo.com /td sha256 /fd SHA256 xlwings32.dll xlwings64.dll
    - name: Build files
      shell: bash
      env:
        ASPOSE_LICENSE: ${{ secrets.ASPOSE_LICENSE }}
        XLWINGS_LICENSE_KEY_SECRET: ${{ secrets.XLWINGS_LICENSE_KEY_SECRET }}
      run: |
        python ./scripts/build_excel_files.py
      # Code sign Excel add-in (start)
    - name: Download and unzip Microsoft Office Subject Interface Packages
      if: github.event_name == 'release'
      shell: bash
      run: |
        # Microsoft Office Subject Interface Packages for Digitally Signing VBA Projects: https://www.microsoft.com/en-us/download/details.aspx?id=56617
        # NOTE: see README in officesips.exe: the whole stack needs to be x86, including signtool, regsvr32.exe and C++ Redistribution Runtime 2010
        mkdir ./officesips
        curl -L https://download.microsoft.com/download/F/B/4/FB46F8CA-6A6F-4CB0-B8F4-06BF3D44DA48/officesips.exe -o ./officesips.exe
        7z x ./officesips.exe -o./officesips
    - name: Install Microsoft Visual C++ Redistributable 2010
      if: github.event_name == 'release'
      run: |
        # https://vcredist.com
        # Must be 2010: https://stackoverflow.com/questions/60239192/signtool-exe-error-signersign-failed-2147220492-0x800403f4-when-signing-ex
        Install-Module -Name VcRedist -Force
        New-Item -Path .\VcRedist -ItemType Directory
        $VcRedists = Get-VcList -Export Unsupported | Where-Object { $_.Release -eq "2010" -and $_.Architecture -eq "x86" }
        Save-VcRedist -VcList $VcRedists -Path .\VcRedist
        Install-VcRedist -VcList $VcRedists -Path .\VcRedist
    - name: Register msosipx.dll
      if: github.event_name == 'release'
      run: |
        # Make sure it uses the 32bit version of regsvr32.exe
        C:\Windows\system32\regsvr32.exe officesips\msosipx.dll
    - name: Sign Excel add-in
      if: github.event_name == 'release'
      run: |
        # Office 365 supports three different signatures on VBA projects, which is the reason why OffSign.bat signs and verifies the files 3x
        # Note that signtools is in ...\bin\x86
        .\officesips\OffSign.bat "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x86\" "sign /f ${{ steps.write_file.outputs.filePath }} /p ${{ secrets.CODESIGN_PASSWORD }} /tr http://timestamp.sectigo.com /td sha256 /fd SHA256" "verify /pa" ".\xlwings\addin\xlwings.xlam"
      # Code sign Excel add-in (end)
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pre-build
        path: |
          ./*
          !./aspose
          !./src
          !./resources
          !./examples
          !./docs

  build:
    needs: pre-build
    name:  Build wheel
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform: [
#          {os: "macos-latest"},
#          {os: "windows-latest"},
          {os: "ubuntu-latest"}
        ]
#        python-version: ["cp37"]

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: pre-build
      - name: Set up Python
        uses: actions/setup-python@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Add aarch64-apple-darwin rust target
        if: matrix.platform.os == 'macos-latest'
        run: rustup target add aarch64-apple-darwin
      - name: Install Python dependencies
        run: python -m pip install wheel setuptools-rust cibuildwheel

      - name: Set up QEMU
        if: matrix.platform.os == 'ubuntu-latest'
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - name: Build Python Package
#        uses: pypa/cibuildwheel@v2.10.1
        env:
          CIBW_BUILD: "cp310-*"
          CIBW_TEST_SKIP: "*_arm64"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_WINDOWS: "AMD64"
#          CIBW_ARCHS_LINUX: "x86_64"
          CIBW_ARCHS_LINUX: "aarch64"
          CIBW_ENVIRONMENT_LINUX: 'PATH="$HOME/.cargo/bin:$PATH" CARGO_NET_GIT_FETCH_WITH_CLI="true"'
          CIBW_BEFORE_BUILD_LINUX: "python -m pip install setuptools wheel setuptools-rust"
          CIBW_MANYLINUX_AARCH64_IMAGE: messense/manylinux2014-cross:aarch64
#          CIBW_BEFORE_ALL_LINUX: |
#            curl -O https://sh.rustup.rs/rustup-init.sh &&
#            sh rustup-init.sh --default-toolchain stable -y
        shell: bash
        run: |
          cd pre-build
          python -m cibuildwheel --output-dir ./wheelhouse
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Package
          path: ./pre-build/wheelhouse/*.whl

  test:
    if: github.ref == 'refs/heads/main'
    name: Test installation
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        architecture: ['x64']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Install Python dependencies
        run: |
          python -m pip install wheel
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: Package
      - name: Test installation
        run: python scripts/ci_test.py

  publish:
    if: github.event_name == 'release'
    name: Publish
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
          architecture: 'x64'
      - name: Install Python dependencies
        run: |
          python -m pip install wheel twine
      - name: Download artifacts
        uses: actions/download-artifact@v1
        with:
          name: Package
      - name: Publish package and update Homepage with release version
        shell: bash
        run: |
          twine upload Package/*.tar.gz
          twine upload Package/*.whl
          curl -X POST -d {} https://api.netlify.com/build_hooks/$NETLIFY_BUILD_HOOK
        env:
          NETLIFY_BUILD_HOOK: ${{ secrets.NETLIFY_BUILD_HOOK }}
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  #          repository_url: https://test.pypi.org/legacy/
#      - name: Upload add-in to GH Release
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1.0.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ github.event.release.upload_url }}
#          asset_path: Package/xlwings.xlam
#          asset_name: xlwings.xlam
#          asset_content_type: application/zip
